{{- MCommentN .Copyright 0}}

/** @file */
{{MCommentMainPage .Doc 0}}

#ifndef {{.HeaderName | ConstantCase}}_H_
#define {{.HeaderName | ConstantCase}}_H_

#if defined(WGPU_SHARED_LIBRARY)
#    if defined(_WIN32)
#        if defined(WGPU_IMPLEMENTATION)
#            define WGPU_EXPORT __declspec(dllexport)
#        else
#            define WGPU_EXPORT __declspec(dllimport)
#        endif
#    else  // defined(_WIN32)
#        if defined(WGPU_IMPLEMENTATION)
#            define WGPU_EXPORT __attribute__((visibility("default")))
#        else
#            define WGPU_EXPORT
#        endif
#    endif  // defined(_WIN32)
#else       // defined(WGPU_SHARED_LIBRARY)
#    define WGPU_EXPORT
#endif  // defined(WGPU_SHARED_LIBRARY)

#if !defined(WGPU_OBJECT_ATTRIBUTE)
#define WGPU_OBJECT_ATTRIBUTE
#endif
#if !defined(WGPU_ENUM_ATTRIBUTE)
#define WGPU_ENUM_ATTRIBUTE
#endif
#if !defined(WGPU_STRUCTURE_ATTRIBUTE)
#define WGPU_STRUCTURE_ATTRIBUTE
#endif
#if !defined(WGPU_FUNCTION_ATTRIBUTE)
#define WGPU_FUNCTION_ATTRIBUTE
#endif
#if !defined(WGPU_NULLABLE)
#define WGPU_NULLABLE
#endif{{"\n" -}}

{{- if ne .Name "webgpu"}}
#if !defined(_wgpu_EXTEND_ENUM)
#ifdef __cplusplus
#define _wgpu_EXTEND_ENUM(E, N, V) static const E N = E(V)
#else
#define _wgpu_EXTEND_ENUM(E, N, V) static const E N = (E)(V)
#endif
#endif // !defined(_wgpu_EXTEND_ENUM)
{{ end}}

{{- if eq .Name "webgpu"}}
#include <stdint.h>
#include <stddef.h>
#include <math.h>
{{else}}
#include "webgpu.h"
{{end}}

{{- if eq .Name "webgpu"}}
#define _wgpu_COMMA ,
#if defined(__cplusplus)
#  define _wgpu_ENUM_ZERO_INIT(type) type(0)
#  define _wgpu_STRUCT_ZERO_INIT {}
#  if __cplusplus >= 201103L
#    define _wgpu_MAKE_INIT_STRUCT(type, value) (type value)
#  else
#    define _wgpu_MAKE_INIT_STRUCT(type, value) value
#  endif
#else
#  define _wgpu_ENUM_ZERO_INIT(type) (type)0
#  define _wgpu_STRUCT_ZERO_INIT {0}
#  if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#    define _wgpu_MAKE_INIT_STRUCT(type, value) ((type) value)
#  else
#    define _wgpu_MAKE_INIT_STRUCT(type, value) value
#  endif
#endif
{{end}}

/**
 * \defgroup Constants Constants
 * \brief Constants.
 *
 * @{
 */

{{- if .Constants}}
{{-   range .Constants}}
{{-     MComment .Doc 0}}
#define WGPU_{{.Name | ConstantCase}}{{if $.ExtSuffix}}_{{$.ExtSuffix}}{{end}} ({{.Value | CValue}})
{{-   end}}
{{  end}}

/** @} */

/**
 * \defgroup UtilityTypes Utility Types
 *
 * @{
 */

{{- if eq .Name "webgpu"}}
typedef uint64_t WGPUFlags;
typedef uint32_t WGPUBool;

/**
 * Nullable value defining a pointer+length view into a UTF-8 encoded string.
 *
 * Values passed into the API may use the special length value @ref WGPU_STRLEN
 * to indicate a null-terminated string.
 * Non-null values passed out of the API (for example as callback arguments)
 * always provide an explicit length and **may or may not be null-terminated**.
 *
 * Some inputs to the API accept null values. Those which do not accept null
 * values "default" to the empty string when null values are passed.
 *
 * Values are encoded as follows:
 * - `{NULL, WGPU_STRLEN}`: the null value.
 * - `{non_null_pointer, WGPU_STRLEN}`: a null-terminated string view.
 * - `{any, 0}`: the empty string.
 * - `{NULL, non_zero_length}`: not allowed (null dereference).
 * - `{non_null_pointer, non_zero_length}`: an explictly-sized string view with
 *   size `non_zero_length` (in bytes).
 *
 * For info on how this is used in various places, see \ref Strings.
 */
typedef struct WGPUStringView {
    char const * WGPU_NULLABLE data;
    size_t length;
} WGPUStringView;

/**
 * Sentinel value used in @ref WGPUStringView to indicate that the pointer
 * is to a null-terminated string, rather than an explicitly-sized string.
 */
#define WGPU_STRLEN SIZE_MAX

/**
 * Initializer for @ref WGPUStringView.
 */
#define WGPU_STRING_VIEW_INIT _wgpu_MAKE_INIT_STRUCT(WGPUStringView, { \
    /*.data=*/NULL _wgpu_COMMA \
    /*.length=*/WGPU_STRLEN _wgpu_COMMA \
})
{{  end}}
{{- range .Typedefs}}
{{-   MComment .Doc 0}}
typedef {{CType .Type "" ""}} WGPU{{.Name | PascalCase}}{{$.ExtSuffix}};
{{  end}}

/** @} */

/**
 * \defgroup Objects Objects
 * \brief Opaque, non-dispatchable handles to WebGPU objects.
 *
 * @{
 */

{{- if .Objects}}
{{-   range .Objects}}
{{-     if not .IsStruct}}
{{-   MComment .Doc 0}}
typedef struct WGPU{{.Name | PascalCase}}{{$.ExtSuffix}}Impl* WGPU{{.Name | PascalCase}}{{$.ExtSuffix}} WGPU_OBJECT_ATTRIBUTE;
{{-     end}}
{{-   end}}
{{  end}}

/** @} */

{{- if .Structs}}
// Structure forward declarations
{{-   range .Structs}}
struct WGPU{{.Name | PascalCase}}{{$.ExtSuffix}};
{{-   end}}
{{  end}}

{{- if .Callbacks}}
// Callback info structure forward declarations
{{-   range .Callbacks}}
struct WGPU{{.Name | PascalCase}}CallbackInfo{{$.ExtSuffix}};
{{-   end}}
{{  end}}

/**
 * \defgroup Enumerations Enumerations
 * \brief Enums.
 *
 * @{
 */

{{- range $enum := .Enums}}
{{-   if .Extended}}
{{-     range $entryIndex, $_ := .Entries}}
{{-       if .}}
_wgpu_EXTEND_ENUM(WGPU{{$enum.Name | PascalCase}}, WGPU{{$enum.Name | PascalCase}}_{{.Name | PascalCase}}{{if $.ExtSuffix}}_{{$.ExtSuffix}}{{end}}, {{EnumValue $.EnumPrefix $enum $entryIndex}});
{{-       end}}
{{-     end}}
{{-   else}}
{{-     MComment .Doc 0}}
typedef enum WGPU{{.Name | PascalCase}}{{$.ExtSuffix}} {
{{-     range $entryIndex, $_ := .Entries}}
{{-       if .}}
{{-         MCommentEnum .Doc 4 $.EnumPrefix $enum $entryIndex }}
    WGPU{{$enum.Name | PascalCase}}_{{.Name | PascalCase}}{{if $.ExtSuffix}}_{{$.ExtSuffix}}{{end}} = {{EnumValue $.EnumPrefix $enum $entryIndex}},
{{-       end}}
{{-     end}}
    WGPU{{$enum.Name | PascalCase}}_Force32{{if $.ExtSuffix}}_{{$.ExtSuffix}}{{end}} = 0x7FFFFFFF
} WGPU{{$enum.Name | PascalCase}}{{$.ExtSuffix}} WGPU_ENUM_ATTRIBUTE;
{{-   end}}
{{  end}}

/** @} */

/**
 * \defgroup Bitflags Bitflags
 * \brief Type and constant definitions for bitflag types.
 *
 * @{
 */

{{- range $bitflag := .Bitflags}}
{{-   MComment .Doc 0}}
typedef WGPUFlags WGPU{{.Name | PascalCase}}{{if $.ExtSuffix}}_{{$.ExtSuffix}}{{end}};
{{-   range $entryIndex, $_ := .Entries}}
{{-     MCommentBitflag .Doc 4 $bitflag $entryIndex }}
static const WGPU{{$bitflag.Name | PascalCase}} WGPU{{$bitflag.Name | PascalCase}}_{{.Name | PascalCase}}{{if $.ExtSuffix}}_{{$.ExtSuffix}}{{end}} = {{BitflagValue $bitflag $entryIndex}};
{{-   end}}
{{  end}}

/** @} */

{{- if eq .Name "webgpu"}}
typedef void (*WGPUProc)(void) WGPU_FUNCTION_ATTRIBUTE;
{{  end}}

/**
 * \defgroup Callbacks Callbacks
 * \brief Callbacks through which asynchronous functions return.
 *
 * @{
 */

{{- range .Callbacks}}
{{-   MCommentCallback . 0}}
typedef void (*WGPU{{.Name | PascalCase}}Callback{{$.ExtSuffix}})({{CallbackArgs .}}) WGPU_FUNCTION_ATTRIBUTE;
{{- end}}

/** @} */

{{- if eq .Name "webgpu"}}
/**
 * \defgroup ChainedStructures Chained Structures
 * \brief Structures used to extend descriptors.
 *
 * @{
 */

typedef struct WGPUChainedStruct {
    struct WGPUChainedStruct * next;
    WGPUSType sType;
} WGPUChainedStruct WGPU_STRUCTURE_ATTRIBUTE;

/** @} */
{{  end}}

/**
 * \defgroup Structures Structures
 * \brief Descriptors and other transparent structures.
 *
 * @{
 */

/**
 * \defgroup WGPUCallbackInfo Callback Info Structs
 * \brief Callback info structures that are used in asynchronous functions.
 *
 * @{
 */

{{- range .Callbacks}}
{{-   MComment .Doc 0}}
typedef struct WGPU{{.Name | PascalCase}}CallbackInfo{{$.ExtSuffix}} {
    WGPUChainedStruct const * nextInChain;
{{-   if eq .Style "callback_mode" }}
    WGPUCallbackMode mode;
{{-   end}}
    WGPU{{.Name | PascalCase}}Callback{{$.ExtSuffix}} callback;
    WGPU_NULLABLE void* userdata1;
    WGPU_NULLABLE void* userdata2;
} WGPU{{.Name | PascalCase}}CallbackInfo{{$.ExtSuffix}} WGPU_STRUCTURE_ATTRIBUTE;

/**
 * Initializer for @ref WGPU{{.Name | PascalCase}}CallbackInfo{{$.ExtSuffix}}.
 */
#define WGPU_{{.Name | ConstantCase}}_CALLBACK_INFO{{if $.ExtSuffix}}_{{$.ExtSuffix}}{{end}}_INIT _wgpu_MAKE_INIT_STRUCT(WGPU{{.Name | PascalCase}}CallbackInfo{{$.ExtSuffix}}, { \
    /*.nextInChain=*/NULL _wgpu_COMMA \
{{-   if eq .Style "callback_mode" }}
    /*.mode=*/WGPUCallbackMode_WaitAnyOnly _wgpu_COMMA \
{{-   end}}
    /*.callback=*/NULL _wgpu_COMMA \
    /*.userdata1=*/NULL _wgpu_COMMA \
    /*.userdata2=*/NULL _wgpu_COMMA \
})
{{  end}}{{"\n" -}}

/** @} */

{{- "\n"}}
{{- range $struct := .Structs}}
{{-   MCommentStruct . 0}}
typedef struct WGPU{{.Name | PascalCase}}{{$.ExtSuffix}} {
{{-   if eq .Type "extensible" }}
    WGPUChainedStruct * nextInChain;
{{-   else if eq .Type "extension"}}
    WGPUChainedStruct chain;
{{-   end}}
{{-   range $memberIndex, $_ := .Members}}
{{-     if (.Type | IsArray)}}
    /**
     * Array count for `{{.Name | CamelCase}}`. The `INIT` macro sets this to 0.
     */
    {{  StructMemberArrayCount $struct $memberIndex}}
    {{- MCommentMember . 4 }}
    {{  StructMemberArrayData $struct $memberIndex}}
{{-     else}}
    {{- MCommentMember . 4 }}
    {{  StructMember $struct $memberIndex}}
{{-     end}}
{{-   end}}
} WGPU{{.Name | PascalCase}}{{$.ExtSuffix}} WGPU_STRUCTURE_ATTRIBUTE;

/**
 * Initializer for @ref WGPU{{.Name | PascalCase}}{{$.ExtSuffix}}.
 */
#define WGPU_{{.Name | ConstantCase}}{{if $.ExtSuffix}}_{{$.ExtSuffix}}{{end}}_INIT _wgpu_MAKE_INIT_STRUCT(WGPU{{.Name | PascalCase}}{{$.ExtSuffix}}, { \
{{-   if eq .Type "extensible" }}
    /*.nextInChain=*/NULL _wgpu_COMMA \
{{-   else if eq .Type "extension" }}
    /*.chain=*/_wgpu_MAKE_INIT_STRUCT(WGPUChainedStruct, { \
        /*.next=*/NULL _wgpu_COMMA \
        /*.sType=*/WGPUSType_{{.Name | PascalCase}}{{$.ExtSuffix}} _wgpu_COMMA \
    }) _wgpu_COMMA \
{{-   end }}
{{-   range $memberIndex, $_ := .Members}}
    {{  StructMemberInitializer $struct $memberIndex}}
{{-   end}}
})
{{  end}}{{"\n" -}}

/** @} */

#ifdef __cplusplus
extern "C" {
#endif

#if !defined(WGPU_SKIP_PROCS){{"\n" -}}

{{- range .Functions}}
/**
 * Proc pointer type for @ref wgpu{{.Name | PascalCase}}{{$.ExtSuffix}}:
 * > @copydoc wgpu{{.Name | PascalCase}}{{$.ExtSuffix}}
 */
typedef {{FunctionReturns .}} (*WGPUProc{{.Name | PascalCase}}{{$.ExtSuffix}})({{FunctionArgs . nil}}) WGPU_FUNCTION_ATTRIBUTE;
{{- end}}
{{- if eq .Name "webgpu"}}
/**
 * Proc pointer type for @ref wgpuGetProcAddress:
 * > @copydoc wgpuGetProcAddress
 */
typedef WGPUProc (*WGPUProcGetProcAddress)(WGPUStringView procName) WGPU_FUNCTION_ATTRIBUTE;
{{  end}}

{{- range $object := .Objects}}
// Procs of {{$object.Name | PascalCase}}
{{-   range $object.Methods}}
/**
 * Proc pointer type for @ref wgpu{{$object.Name | PascalCase}}{{.Name | PascalCase}}{{$.ExtSuffix}}:
 * > @copydoc wgpu{{$object.Name | PascalCase}}{{.Name | PascalCase}}{{$.ExtSuffix}}
 */
typedef {{FunctionReturns .}} (*WGPUProc{{$object.Name | PascalCase}}{{.Name | PascalCase}}{{$.ExtSuffix}})({{FunctionArgs . $object}}) WGPU_FUNCTION_ATTRIBUTE;
{{-   end}}
{{-   if not (or .IsStruct .Extended)}}
/**
 * Proc pointer type for @ref wgpu{{$object.Name | PascalCase}}AddRef{{$.ExtSuffix}}.
 * > @copydoc wgpu{{$object.Name | PascalCase}}AddRef{{$.ExtSuffix}}
 */
typedef void (*WGPUProc{{.Name | PascalCase}}AddRef{{$.ExtSuffix}})(WGPU{{.Name | PascalCase}} {{.Name | CamelCase}}) WGPU_FUNCTION_ATTRIBUTE;
/**
 * Proc pointer type for @ref wgpu{{$object.Name | PascalCase}}Release{{$.ExtSuffix}}.
 * > @copydoc wgpu{{$object.Name | PascalCase}}Release{{$.ExtSuffix}}
 */
typedef void (*WGPUProc{{.Name | PascalCase}}Release{{$.ExtSuffix}})(WGPU{{.Name | PascalCase}} {{.Name | CamelCase}}) WGPU_FUNCTION_ATTRIBUTE;
{{-   end}}
{{  end}}{{"\n" -}}

#endif  // !defined(WGPU_SKIP_PROCS)

#if !defined(WGPU_SKIP_DECLARATIONS){{"\n" -}}

/**
 * \defgroup GlobalFunctions Global Functions
 * \brief Functions that are not specific to an object.
 *
 * @{
 */

{{- range .Functions}}
{{-   MCommentFunction . 0}}
WGPU_EXPORT {{FunctionReturns .}} wgpu{{.Name | PascalCase}}{{$.ExtSuffix}}({{FunctionArgs . nil}}) WGPU_FUNCTION_ATTRIBUTE;
{{- end}}
{{- if eq .Name "webgpu"}}
/**
 * Returns the "procedure address" (function pointer) of the named function.
 * The result must be cast to the appropriate proc pointer type.
 */
WGPU_EXPORT WGPUProc wgpuGetProcAddress(WGPUStringView procName) WGPU_FUNCTION_ATTRIBUTE;
{{  end}}

/** @} */

/**
 * \defgroup Methods Methods
 * \brief Functions that are relative to a specific object.
 *
 * @{
 */

{{- range $object := .Objects}}

/**
 * \defgroup WGPU{{$object.Name | PascalCase}}Methods WGPU{{$object.Name | PascalCase}} methods
 * \brief Functions whose first argument has type WGPU{{$object.Name | PascalCase}}.
 *
 * @{
 */
{{-   range $object.Methods}}
{{-     MCommentFunction . 0}}
WGPU_EXPORT {{FunctionReturns .}} wgpu{{$object.Name | PascalCase}}{{.Name | PascalCase}}{{$.ExtSuffix}}({{FunctionArgs . $object}}) WGPU_FUNCTION_ATTRIBUTE;
{{-   end}}
{{-   if not (or .IsStruct .Extended)}}
WGPU_EXPORT void wgpu{{.Name | PascalCase}}AddRef{{$.ExtSuffix}}(WGPU{{.Name | PascalCase}} {{.Name | CamelCase}}) WGPU_FUNCTION_ATTRIBUTE;
WGPU_EXPORT void wgpu{{.Name | PascalCase}}Release{{$.ExtSuffix}}(WGPU{{.Name | PascalCase}} {{.Name | CamelCase}}) WGPU_FUNCTION_ATTRIBUTE;
{{-   end}}
/** @} */

{{  end}}{{"\n" -}}

/** @} */

#endif  // !defined(WGPU_SKIP_DECLARATIONS)

#ifdef __cplusplus
} // extern "C"
#endif

#endif // {{.HeaderName | ConstantCase}}_H_
