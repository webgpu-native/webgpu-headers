{{- range .Copyrights}}
{{- MComment . 0 -}}
{{- end}}{{"\n" -}}

#ifndef WEBGPU_H_
#define WEBGPU_H_

#if defined(WGPU_SHARED_LIBRARY)
#    if defined(_WIN32)
#        if defined(WGPU_IMPLEMENTATION)
#            define WGPU_EXPORT __declspec(dllexport)
#        else
#            define WGPU_EXPORT __declspec(dllimport)
#        endif
#    else  // defined(_WIN32)
#        if defined(WGPU_IMPLEMENTATION)
#            define WGPU_EXPORT __attribute__((visibility("default")))
#        else
#            define WGPU_EXPORT
#        endif
#    endif  // defined(_WIN32)
#else       // defined(WGPU_SHARED_LIBRARY)
#    define WGPU_EXPORT
#endif  // defined(WGPU_SHARED_LIBRARY)

#if !defined(WGPU_OBJECT_ATTRIBUTE)
#define WGPU_OBJECT_ATTRIBUTE
#endif
#if !defined(WGPU_ENUM_ATTRIBUTE)
#define WGPU_ENUM_ATTRIBUTE
#endif
#if !defined(WGPU_STRUCTURE_ATTRIBUTE)
#define WGPU_STRUCTURE_ATTRIBUTE
#endif
#if !defined(WGPU_FUNCTION_ATTRIBUTE)
#define WGPU_FUNCTION_ATTRIBUTE
#endif
#if !defined(WGPU_NULLABLE)
#define WGPU_NULLABLE
#endif

#include <stdint.h>
#include <stddef.h>{{"\n" -}}

{{range .Constants}}
{{MComment .Doc 0 -}}
#define WGPU_{{.Name | ConstantCase}} ({{.Value | CValue}})
{{- end }}{{"\n\n" -}}

typedef uint32_t WGPUFlags;
typedef uint32_t WGPUBool;{{"\n" -}}

{{range .Objects}}
{{- if not .Fake}}
typedef struct WGPU{{.Name | PascalCase}}Impl* WGPU{{.Name | PascalCase}} WGPU_OBJECT_ATTRIBUTE;
{{- end}}
{{- end}}

// Structure forward declarations{{"" -}}
{{range .Structs}}
struct WGPU{{.Name | PascalCase}};
{{- end}}{{"\n" -}}

{{range $_, $entry := .Enums}}
typedef enum WGPU{{.Name | PascalCase}} {
    {{range $entryIndex, $_ := .Entries}}
        {{- $value := 0 -}}
        {{- if eq .Value "" -}}
            {{- $value = $entryIndex -}}
        {{- else -}}
            {{- $value = ParseUint .Value -}}
        {{- end -}}
        WGPU{{$entry.Name | PascalCase}}_{{.Name | PascalCase}} = {{printf "%s%.4X" .ValuePrefix $value}},
    {{end -}}
    WGPU{{.Name | PascalCase}}_Force32 = 0x7FFFFFFF
} WGPU{{.Name | PascalCase}} WGPU_ENUM_ATTRIBUTE;{{"\n"}}
{{- end}}{{"" -}}

{{range $_, $entry := .Bitflags}}
typedef enum WGPU{{.Name | PascalCase}} {
    {{range $entryIndex, $_ := .Entries -}}
        {{- $value := "" -}}
        {{- $valueCombination := .ValueCombination -}}
        {{- range $valueIndex, $v := .ValueCombination -}}
            {{- $v = (printf "WGPU%s_%s" ($entry.Name | PascalCase) ($v | PascalCase)) -}}
            {{- if IsLast $valueIndex $valueCombination -}}
                {{- $value = (print $value $v) -}}
            {{- else -}}
                {{- $value = (print $value $v " | ") -}}
            {{- end -}}
        {{- else -}}
            {{- if eq .Value ""}}
                {{- $value = (printf "0x%.8X" (BitFlagValue $entryIndex)) -}}
            {{- else}}
                {{- $value = (printf "0x%.8X" (ParseUint .Value)) -}}
            {{- end}}
        {{- end -}}
        WGPU{{$entry.Name | PascalCase}}_{{.Name | PascalCase}} = {{$value}},
    {{end -}}
    WGPU{{.Name | PascalCase}}_Force32 = 0x7FFFFFFF
} WGPU{{.Name | PascalCase}} WGPU_ENUM_ATTRIBUTE;
typedef WGPUFlags WGPU{{.Name | PascalCase}}Flags WGPU_ENUM_ATTRIBUTE;{{"\n"}}
{{- end}}{{"\n" -}}

typedef void (*WGPUProc)(void) WGPU_FUNCTION_ATTRIBUTE;{{"" -}}

{{- range .FunctionTypes}}
typedef {{FunctionReturns .}} (*WGPU{{.Name | PascalCase}})({{FunctionArgs . nil}}) WGPU_FUNCTION_ATTRIBUTE;
{{- end}}{{"" -}}

{{- range $_, $object := .Objects}}
{{- range $_, $method := .Methods}}
{{- if .ReturnsAsync}}
typedef void (*WGPU{{$object.Name | PascalCase}}{{$method.Name | PascalCase}}Callback)({{CallbackArgs .}}) WGPU_FUNCTION_ATTRIBUTE;
{{- end}}
{{- end}}
{{- end}}

typedef struct WGPUChainedStruct {
    struct WGPUChainedStruct const * next;
    WGPUSType sType;
} WGPUChainedStruct WGPU_STRUCTURE_ATTRIBUTE;

typedef struct WGPUChainedStructOut {
    struct WGPUChainedStructOut * next;
    WGPUSType sType;
} WGPUChainedStructOut WGPU_STRUCTURE_ATTRIBUTE;{{"\n" -}}

{{range .Structs}}
typedef struct WGPU{{.Name | PascalCase}} {
    {{- if eq .Type "base_in" }}
    WGPUChainedStruct const * nextInChain;
    {{- else if eq .Type "base_out" }}
    WGPUChainedStructOut * nextInChain;
    {{- else if eq .Type "extension_in"}}
    WGPUChainedStruct chain;
    {{- else if eq .Type "extension_out"}}
    WGPUChainedStructOut chain;
    {{- end}}
    {{- range .Members}}
    {{- if IsArray .Type}}
    size_t {{.Name | CamelCase | Singularize}}Count;
    {{ArrayType .Type .Pointer}} {{.Name | CamelCase}};
    {{- else}}
    {{if .Optional}}WGPU_NULLABLE {{end}}{{CType .Type .Pointer}} {{.Name | CamelCase}};
    {{- end}}
    {{- end}}
} WGPU{{.Name | PascalCase}} WGPU_STRUCTURE_ATTRIBUTE;{{"\n" -}}
{{- end}}{{"\n" -}}

#ifdef __cplusplus
extern "C" {
#endif

#if !defined(WGPU_SKIP_PROCS){{"\n" -}}

{{range .Functions}}
typedef {{FunctionReturns .}} (*WGPUProc{{.Name | PascalCase}})({{FunctionArgs . nil}}) WGPU_FUNCTION_ATTRIBUTE;
{{- end}}{{"\n" -}}
typedef WGPUProc (*WGPUProcGetProcAddress)(WGPUDevice device, char const * procName) WGPU_FUNCTION_ATTRIBUTE;{{"\n" -}}

{{range $_, $object := .Objects}}
// Procs of {{$object.Name | PascalCase}}{{"" -}}
{{range $object.Methods}}
typedef {{FunctionReturns .}} (*WGPUProc{{$object.Name | PascalCase}}{{.Name | PascalCase}})({{FunctionArgs . $object}}) WGPU_FUNCTION_ATTRIBUTE;
{{- end}}
{{- if not .Fake}}
typedef void (*WGPUProc{{.Name | PascalCase}}Reference)(WGPU{{.Name | PascalCase}} {{.Name | CamelCase}}) WGPU_FUNCTION_ATTRIBUTE;
typedef void (*WGPUProc{{.Name | PascalCase}}Release)(WGPU{{.Name | PascalCase}} {{.Name | CamelCase}}) WGPU_FUNCTION_ATTRIBUTE;
{{- end}}{{"\n" -}}
{{- end}}{{"\n" -}}

#endif  // !defined(WGPU_SKIP_PROCS)

#if !defined(WGPU_SKIP_DECLARATIONS){{"\n" -}}

{{range .Functions}}
WGPU_EXPORT {{FunctionReturns .}} wgpu{{.Name | PascalCase}}({{FunctionArgs . nil}}) WGPU_FUNCTION_ATTRIBUTE;
{{- end}}{{"\n" -}}
WGPU_EXPORT WGPUProc wgpuGetProcAddress(WGPUDevice device, char const * procName) WGPU_FUNCTION_ATTRIBUTE;{{"\n" -}}

{{range $_, $object := .Objects}}
// Methods of {{$object.Name | PascalCase}}{{"" -}}
{{range $object.Methods}}
WGPU_EXPORT {{FunctionReturns .}} wgpu{{$object.Name | PascalCase}}{{.Name | PascalCase}}({{FunctionArgs . $object}}) WGPU_FUNCTION_ATTRIBUTE;
{{- end}}
{{- if not .Fake}}
WGPU_EXPORT void wgpu{{.Name | PascalCase}}Reference(WGPU{{.Name | PascalCase}} {{.Name | CamelCase}}) WGPU_FUNCTION_ATTRIBUTE;
WGPU_EXPORT void wgpu{{.Name | PascalCase}}Release(WGPU{{.Name | PascalCase}} {{.Name | CamelCase}}) WGPU_FUNCTION_ATTRIBUTE;
{{- end}}{{"\n" -}}
{{- end}}{{"\n" -}}

#endif  // !defined(WGPU_SKIP_DECLARATIONS)

#ifdef __cplusplus
} // extern "C"
#endif

#endif // WEBGPU_H_
